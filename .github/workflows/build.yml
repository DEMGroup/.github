name: Build and Test

on:
  pull_request:
    branches:
      - $default-branch
    paths-ignore:
      - '**/*.md'
      - '**/*.yml'
  workflow_call:

jobs:
  check-is-dotnet:
    runs-on: ubuntu-latest
    outputs:
      isDotnet: ${{ steps.check.outputs.isDotnet }}
    steps:
      - uses: actions/checkout@v3
      - name: Project Type Checker
        id: check
        run: |
          isDotnet=false
          if test -n "$(find . -name '*.sln')"; then
            isDotnet=true
          fi
          echo "isDotnet=$isDotnet" >> $GITHUB_OUTPUT
  check-is-node:
    runs-on: ubuntu-latest
    outputs:
      isNode: ${{ steps.check.outputs.isNode }}
    steps:
      - uses: actions/checkout@v3
      - name: Project Type Checker
        id: check
        run: |
          isNode=false
          if test -n "package.json"; then
            isNode=true
          fi
          echo "isNode=$isNode" >> $GITHUB_OUTPUT

  build-dotnet:
    needs: [check-is-dotnet, check-is-node]
    if: ${{ needs.check-is-dotnet.outputs.isDotnet == 'true' && needs.check-is-node.outputs.isNode == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ github.repository }}-${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj')}}
          restore-keys: ${{ github.repository }}-${{ runner.os }}-nuget-
      - name: Add Github Package Source
        run: dotnet nuget add source --username DEMGroup --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github.com "https://nuget.pkg.github.com/DEMGroup/index.json"
      - name: Install dependencies
        run: dotnet restore -r linux-x64
      - name: Build
        run: dotnet build -v=q --configuration Release --no-restore
      - name: Test
        run: dotnet test --no-restore --logger trx --results-directory TestResults
      - name: Check Test File Exists
        if: success() || failure()
        id: hasTests
        run: |
          if compgen -G "TestResults/*.trx" > /dev/null; then
            hasTest=true
          else
            hasTest=false
          fi
          echo "hasTests=$hasTest" >> $GITHUB_OUTPUT
      - name: Test Reporter
        if: ${{ steps.hasTests.outputs.hasTests == 'true' }}
        uses: phoenix-actions/test-reporting@v10
        with:
          name: ${{ github.repository }} Test Results
          path: TestResults/*.trx
          reporter: dotnet-trx
          output-to: step-summary

  build-node:
    needs: [check-is-dotnet, check-is-node]
    if: ${{ needs.check-is-dotnet.outputs.isDotnet == 'false' && needs.check-is-node.outputs.isNode == 'true' }}
    runs-on:
      labels: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ github.repository }}-${{ runner.os }}-npm-${{ hashFiles('package-lock.json')}}
          restore-keys: ${{ github.repository }}-${{ runner.os }}-npm-
      - name: Install deps
        run: npm ci
      - name: Build the app
        run: npm run build
      - name: Run the tests
        run: npm run test:ci
      - name: Check Test File Exists
        if: success() || failure()
        id: hasTests
        run: |
          if compgen -G "testReports/jest-*.xml" > /dev/null; then
            hasTest=true
          else
            hasTest=false
          fi
          echo "hasTests=$hasTest" >> $GITHUB_OUTPUT
      - name: Test Reporter
        if: ${{ steps.hasTests.outputs.hasTests == 'true' }}
        uses: phoenix-actions/test-reporting@v10
        with:
          name: ${{ github.repository }} Test Results
          path: testReports/jest-*.xml
          reporter: jest-junit
          output-to: step-summary